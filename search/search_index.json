{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Toto tata","title":"Welcome"},{"location":"#toto","text":"tata","title":"Toto"},{"location":"bestpractices/","text":"Build Best Practices ... All those are plugins / go into plugins section. Checkstyle without Complaints Link to google checks file Code snipped: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-checkstyle-plugin </artifactId> <version> 3.2.0 </version> <configuration> <configLocation> google_checks.xml </configLocation> <consoleOutput> true </consoleOutput> <violationSeverity> warning </violationSeverity> <failOnViolation> true </failOnViolation> <failsOnError> true </failsOnError> <linkXRef> false </linkXRef> </configuration> <executions> <execution> <id> validate </id> <phase> validate </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> JavaDoc Parameter Check <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-javadoc-plugin </artifactId> <version> 3.4.0 </version> <configuration> <source> 8 </source> <javadocExecutable> ${java.home}/bin/javadoc </javadocExecutable> <reportOutputDirectory> ${project.reporting.outputDirectory}/docs </reportOutputDirectory> <destDir> docs </destDir> </configuration> <executions> <execution> <id> attach-javadocs </id> <goals> <goal> jar </goal> </goals> <configuration> <failOnWarnings> true </failOnWarnings> </configuration> </execution> </executions> </plugin> Generates to top level docs folder. The failOnWarnings : true entry ensures your program does not compile unless all parameters are documented. Unit Tests Passing dependency: <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.10 </version> <scope> test </scope> </dependency> plugin: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 2.22.2 </version> </plugin> Refuses build anless all unit tests defines in src/test/java pass. Sample unit test: package eu.kartoffelquadrat.whatever ; import org.junit.Test ; /** * Simple demo test... * * @author Maximilian Schiedermeier */ public class PrinterVsLoggerTest { @Test public void testPrinter () { AssertTrue (...); } }","title":"Best Practices"},{"location":"bestpractices/#build-best-practices","text":"... All those are plugins / go into plugins section.","title":"Build Best Practices"},{"location":"bestpractices/#checkstyle-without-complaints","text":"Link to google checks file Code snipped: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-checkstyle-plugin </artifactId> <version> 3.2.0 </version> <configuration> <configLocation> google_checks.xml </configLocation> <consoleOutput> true </consoleOutput> <violationSeverity> warning </violationSeverity> <failOnViolation> true </failOnViolation> <failsOnError> true </failsOnError> <linkXRef> false </linkXRef> </configuration> <executions> <execution> <id> validate </id> <phase> validate </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin>","title":"Checkstyle without Complaints"},{"location":"bestpractices/#javadoc-parameter-check","text":"<plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-javadoc-plugin </artifactId> <version> 3.4.0 </version> <configuration> <source> 8 </source> <javadocExecutable> ${java.home}/bin/javadoc </javadocExecutable> <reportOutputDirectory> ${project.reporting.outputDirectory}/docs </reportOutputDirectory> <destDir> docs </destDir> </configuration> <executions> <execution> <id> attach-javadocs </id> <goals> <goal> jar </goal> </goals> <configuration> <failOnWarnings> true </failOnWarnings> </configuration> </execution> </executions> </plugin> Generates to top level docs folder. The failOnWarnings : true entry ensures your program does not compile unless all parameters are documented.","title":"JavaDoc Parameter Check"},{"location":"bestpractices/#unit-tests-passing","text":"dependency: <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.10 </version> <scope> test </scope> </dependency> plugin: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 2.22.2 </version> </plugin> Refuses build anless all unit tests defines in src/test/java pass. Sample unit test: package eu.kartoffelquadrat.whatever ; import org.junit.Test ; /** * Simple demo test... * * @author Maximilian Schiedermeier */ public class PrinterVsLoggerTest { @Test public void testPrinter () { AssertTrue (...); } }","title":"Unit Tests Passing"},{"location":"buildtojar/","text":"","title":"Buildtojar"},{"location":"dependencies/","text":"","title":"Dependency Management"},{"location":"ideintegration/","text":"","title":"IDE Integration"},{"location":"layout/","text":"Folder layout The items marked in red are mandated by maven. This structure has to be exactly like above. The items marked blue are your group id. Of course you should not use my id \"eu/kartoffelquadrat\", but something that represents your group, e.g. comp361/hexanomeXX The item marked yellow is your artifactid. That one describes your software. It should be splendorclient.","title":"Maven Project Layout"},{"location":"minimalpom/","text":"Miminal Pom <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>eu.kartoffelquadrat</groupId> <artifactId>projectname</artifactId> <packaging>jar</packaging> <version>1.0</version> <name>printer</name> <url>http://maven.apache.org</url> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.source>1.8</maven.compiler.source> <build.name>ProjectNameInCamelCase</build.name> </properties> <!-- main developer --> <developers> <developer> <name>Maximilian Schiedermeier</name> <email>maximilian.schiedermeier@mcgill.ca</email> <organization>kartoffelquadrat.eu</organization> <organizationUrl>https://github.com/kartoffelquadrat</organizationUrl> </developer> </developers> <!-- legal --> <licenses> <license> <name>MIT License</name> <url>http://www.opensource.org/licenses/mit-license.php</url> <distribution>repo</distribution> </license> </licenses> <dependencies> </dependencies> <build> <!-- Override default name of generated artifacts --> <finalName>${build.name}</finalName> <plugins> </plugins> </build> </project>","title":"Minimal Pom"},{"location":"minimalpom/#miminal-pom","text":"<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>eu.kartoffelquadrat</groupId> <artifactId>projectname</artifactId> <packaging>jar</packaging> <version>1.0</version> <name>printer</name> <url>http://maven.apache.org</url> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.source>1.8</maven.compiler.source> <build.name>ProjectNameInCamelCase</build.name> </properties> <!-- main developer --> <developers> <developer> <name>Maximilian Schiedermeier</name> <email>maximilian.schiedermeier@mcgill.ca</email> <organization>kartoffelquadrat.eu</organization> <organizationUrl>https://github.com/kartoffelquadrat</organizationUrl> </developer> </developers> <!-- legal --> <licenses> <license> <name>MIT License</name> <url>http://www.opensource.org/licenses/mit-license.php</url> <distribution>repo</distribution> </license> </licenses> <dependencies> </dependencies> <build> <!-- Override default name of generated artifacts --> <finalName>${build.name}</finalName> <plugins> </plugins> </build> </project>","title":"Miminal Pom"},{"location":"profiles/","text":"","title":"Profiles"},{"location":"run/","text":"Run This one depends on the frameworks you are using: Vanilla / No Frameworks Spring Boot Java FX <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <version>1.6.0</version> <executions> <execution> <goals> <goal>java</goal> </goals> </execution> </executions> <configuration> <mainClass>eu.kartoffelquadrat.printer.PrinterVsLogger</mainClass> </configuration> </plugin> Start with: mvn clean package exec:java ---No Plugins Needed--- Start with: mvn clean package spring-boot:run <plugin> <groupId>org.openjfx</groupId> <artifactId>javafx-maven-plugin</artifactId> <version>0.0.8</version> <configuration> <mainClass>eu.kartoffelquadrat.javafxhelloworld.Launcher</mainClass> </configuration> </plugin> Start with: mvn clean package javafx:run","title":"Direct Run"},{"location":"run/#run","text":"This one depends on the frameworks you are using: Vanilla / No Frameworks Spring Boot Java FX <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <version>1.6.0</version> <executions> <execution> <goals> <goal>java</goal> </goals> </execution> </executions> <configuration> <mainClass>eu.kartoffelquadrat.printer.PrinterVsLogger</mainClass> </configuration> </plugin> Start with: mvn clean package exec:java ---No Plugins Needed--- Start with: mvn clean package spring-boot:run <plugin> <groupId>org.openjfx</groupId> <artifactId>javafx-maven-plugin</artifactId> <version>0.0.8</version> <configuration> <mainClass>eu.kartoffelquadrat.javafxhelloworld.Launcher</mainClass> </configuration> </plugin> Start with: mvn clean package javafx:run","title":"Run"},{"location":"signature/","text":"","title":"Signature"}]}