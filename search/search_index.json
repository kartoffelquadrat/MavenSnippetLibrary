{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Maven Snippet Library Maven is a powerful build tool. Yet the many configuration options it offers are often overwhelming to newcomers, and even setting up a simple project \"that just works\" can be at first a tedious task. About this Page This web page hosts a step by step guide, that takes you from a minimal valid configuration to advanced features, all with tested and proven snippets . Contributions Feel free to report errors or improvement suggestions via merge requests to https://github.com/kartoffelqudrat/MavenSnippetLibrary. Most of all have lots of fun and happy coding, Max","title":"Welcome"},{"location":"#maven-snippet-library","text":"Maven is a powerful build tool. Yet the many configuration options it offers are often overwhelming to newcomers, and even setting up a simple project \"that just works\" can be at first a tedious task.","title":"Maven Snippet Library"},{"location":"#about-this-page","text":"This web page hosts a step by step guide, that takes you from a minimal valid configuration to advanced features, all with tested and proven snippets .","title":"About this Page"},{"location":"#contributions","text":"Feel free to report errors or improvement suggestions via merge requests to https://github.com/kartoffelqudrat/MavenSnippetLibrary. Most of all have lots of fun and happy coding, Max","title":"Contributions"},{"location":"bestpractices/","text":"Build Best Practices ... All those are plugins / go into plugins section. Checkstyle without Complaints Link to google checks file Code snipped: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-checkstyle-plugin </artifactId> <version> 3.2.0 </version> <configuration> <configLocation> google_checks.xml </configLocation> <consoleOutput> true </consoleOutput> <violationSeverity> warning </violationSeverity> <failOnViolation> true </failOnViolation> <failsOnError> true </failsOnError> <linkXRef> false </linkXRef> </configuration> <executions> <execution> <id> validate </id> <phase> validate </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> JavaDoc Parameter Check <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-javadoc-plugin </artifactId> <version> 3.4.0 </version> <configuration> <source> 8 </source> <javadocExecutable> ${java.home}/bin/javadoc </javadocExecutable> <reportOutputDirectory> ${project.reporting.outputDirectory}/docs </reportOutputDirectory> <destDir> docs </destDir> </configuration> <executions> <execution> <id> attach-javadocs </id> <goals> <goal> jar </goal> </goals> <configuration> <failOnWarnings> true </failOnWarnings> </configuration> </execution> </executions> </plugin> Generates to top level docs folder. The failOnWarnings : true entry ensures your program does not compile unless all parameters are documented. Unit Tests Passing dependency: <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.10 </version> <scope> test </scope> </dependency> plugin: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 2.22.2 </version> </plugin> Refuses build anless all unit tests defines in src/test/java pass. Sample unit test: package eu.kartoffelquadrat.whatever ; import org.junit.Test ; /** * Simple demo test... * * @author Maximilian Schiedermeier */ public class PrinterVsLoggerTest { @Test public void testPrinter () { AssertTrue (...); } }","title":"Best Practices"},{"location":"bestpractices/#build-best-practices","text":"... All those are plugins / go into plugins section.","title":"Build Best Practices"},{"location":"bestpractices/#checkstyle-without-complaints","text":"Link to google checks file Code snipped: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-checkstyle-plugin </artifactId> <version> 3.2.0 </version> <configuration> <configLocation> google_checks.xml </configLocation> <consoleOutput> true </consoleOutput> <violationSeverity> warning </violationSeverity> <failOnViolation> true </failOnViolation> <failsOnError> true </failsOnError> <linkXRef> false </linkXRef> </configuration> <executions> <execution> <id> validate </id> <phase> validate </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin>","title":"Checkstyle without Complaints"},{"location":"bestpractices/#javadoc-parameter-check","text":"<plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-javadoc-plugin </artifactId> <version> 3.4.0 </version> <configuration> <source> 8 </source> <javadocExecutable> ${java.home}/bin/javadoc </javadocExecutable> <reportOutputDirectory> ${project.reporting.outputDirectory}/docs </reportOutputDirectory> <destDir> docs </destDir> </configuration> <executions> <execution> <id> attach-javadocs </id> <goals> <goal> jar </goal> </goals> <configuration> <failOnWarnings> true </failOnWarnings> </configuration> </execution> </executions> </plugin> Generates to top level docs folder. The failOnWarnings : true entry ensures your program does not compile unless all parameters are documented.","title":"JavaDoc Parameter Check"},{"location":"bestpractices/#unit-tests-passing","text":"dependency: <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.10 </version> <scope> test </scope> </dependency> plugin: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 2.22.2 </version> </plugin> Refuses build anless all unit tests defines in src/test/java pass. Sample unit test: package eu.kartoffelquadrat.whatever ; import org.junit.Test ; /** * Simple demo test... * * @author Maximilian Schiedermeier */ public class PrinterVsLoggerTest { @Test public void testPrinter () { AssertTrue (...); } }","title":"Unit Tests Passing"},{"location":"buildtojar/","text":"","title":"Buildtojar"},{"location":"dependencies/","text":"","title":"Dependency Management"},{"location":"ideintegration/","text":"","title":"IDE Integration"},{"location":"layout/","text":"Project Layout You might be used from other programming languages or simpler projects to just throw in you code files at random place and click a green triangle start button in your IDE without much trouble. While this may work for some toy examples or little scripting tools, hacked in a day, bigger software projects often have a long list of requirements and likewise are expected to compile and run reliable no matter to platform or developer cloning the project. This is where maven enters the game. Maven replaces drag and click based project configuration where a developer sets up their project via IDE menus, by a central xml textual description, the `pom.xml . Files and Folders The root of a maven project should roughly look like this: Before we go into the details, not that there are two important entires at root level: pom.xml which contains all project configuration. Almost everything presented on this webpage are snippets that extend this file. A src folder, all your source code, tests, even resources go somewhere into that folder. Depending on which configurations you add to your pom.xml you might have addition content on top level. But for a start these are the minimum requirement for your project at root level. Next let's look at the content of the src folder. Everything that carries a red marker in the capture above must be in place, exactly as shown for your project to be valid. Your java sources go into src/main/java Your java tests fo into src/test/java Your resource files go into src/main/resources GroupId, ArtifactId, Packages In the test/java and src/java folder you see subfolders: eu/kartoffelquadrat/printer . eu/kartoffelquadrat has a green label. This on represents your groupId . The groupId is specific to the developer or team of developers responsible for the project. By convention it is the inverted domain name of your affiliation. So for instance if you are a student at McGill you could use: ca/mcgill instead of eu/kartoffelquadrat . Do not use eu/kartoffelquadrat for your projects. That domain is owned by me, so you better not pretend to release software on my behalf. ;) printer is the artifactId . It describes the specific purpose of your project. For instance if you are developing a board game tic tac toe client, it could be ticTacToeClient . Optionally you can create further subfolders for packages. E.g. if you have an MVC structure you can place parallel folders for model , view , control under your artifactId . This is optional.","title":"Maven Project Layout"},{"location":"layout/#project-layout","text":"You might be used from other programming languages or simpler projects to just throw in you code files at random place and click a green triangle start button in your IDE without much trouble. While this may work for some toy examples or little scripting tools, hacked in a day, bigger software projects often have a long list of requirements and likewise are expected to compile and run reliable no matter to platform or developer cloning the project. This is where maven enters the game. Maven replaces drag and click based project configuration where a developer sets up their project via IDE menus, by a central xml textual description, the `pom.xml .","title":"Project Layout"},{"location":"layout/#files-and-folders","text":"The root of a maven project should roughly look like this: Before we go into the details, not that there are two important entires at root level: pom.xml which contains all project configuration. Almost everything presented on this webpage are snippets that extend this file. A src folder, all your source code, tests, even resources go somewhere into that folder. Depending on which configurations you add to your pom.xml you might have addition content on top level. But for a start these are the minimum requirement for your project at root level. Next let's look at the content of the src folder. Everything that carries a red marker in the capture above must be in place, exactly as shown for your project to be valid. Your java sources go into src/main/java Your java tests fo into src/test/java Your resource files go into src/main/resources","title":"Files and Folders"},{"location":"layout/#groupid-artifactid-packages","text":"In the test/java and src/java folder you see subfolders: eu/kartoffelquadrat/printer . eu/kartoffelquadrat has a green label. This on represents your groupId . The groupId is specific to the developer or team of developers responsible for the project. By convention it is the inverted domain name of your affiliation. So for instance if you are a student at McGill you could use: ca/mcgill instead of eu/kartoffelquadrat . Do not use eu/kartoffelquadrat for your projects. That domain is owned by me, so you better not pretend to release software on my behalf. ;) printer is the artifactId . It describes the specific purpose of your project. For instance if you are developing a board game tic tac toe client, it could be ticTacToeClient . Optionally you can create further subfolders for packages. E.g. if you have an MVC structure you can place parallel folders for model , view , control under your artifactId . This is optional.","title":"GroupId, ArtifactId, Packages"},{"location":"minimalpom/","text":"Miminal Pom Once you have decided on your groupId , artifactId and set up the required folder structure, the next step is to create a minimal pom.xml . You can use below template as starting point, although you will need to make some minor changes. Template <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>eu.kartoffelquadrat</groupId> <artifactId>projectname</artifactId> <packaging>jar</packaging> <version>1.0</version> <name>printer</name> <url>http://maven.apache.org</url> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.source>1.8</maven.compiler.source> <build.name>ProjectNameInCamelCase</build.name> </properties> <!-- main developer --> <developers> <developer> <name>Maximilian Schiedermeier</name> <email>maximilian.schiedermeier@mcgill.ca</email> <organization>kartoffelquadrat.eu</organization> <organizationUrl>https://github.com/kartoffelquadrat</organizationUrl> </developer> </developers> <!-- legal --> <licenses> <license> <name>MIT License</name> <url>http://www.opensource.org/licenses/mit-license.php</url> <distribution>repo</distribution> </license> </licenses> <dependencies> </dependencies> <build> <!-- Override default name of generated artifacts --> <finalName>${build.name}</finalName> <plugins> </plugins> </build> </project> Changes Replace the groupId tag content by something that describes your group . Replace the artifactId tag content by something that describes your project purpose . Update the name tag to a single human readable word, describing your product. Update the build.name variable to a camelCase description of your product, as you want the generated executable file to be named. Update the developer name and info! Do not use my name! Choose a license, or remove the license block if you want to reserve all rights.","title":"Minimal Pom"},{"location":"minimalpom/#miminal-pom","text":"Once you have decided on your groupId , artifactId and set up the required folder structure, the next step is to create a minimal pom.xml . You can use below template as starting point, although you will need to make some minor changes.","title":"Miminal Pom"},{"location":"minimalpom/#template","text":"<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>eu.kartoffelquadrat</groupId> <artifactId>projectname</artifactId> <packaging>jar</packaging> <version>1.0</version> <name>printer</name> <url>http://maven.apache.org</url> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.source>1.8</maven.compiler.source> <build.name>ProjectNameInCamelCase</build.name> </properties> <!-- main developer --> <developers> <developer> <name>Maximilian Schiedermeier</name> <email>maximilian.schiedermeier@mcgill.ca</email> <organization>kartoffelquadrat.eu</organization> <organizationUrl>https://github.com/kartoffelquadrat</organizationUrl> </developer> </developers> <!-- legal --> <licenses> <license> <name>MIT License</name> <url>http://www.opensource.org/licenses/mit-license.php</url> <distribution>repo</distribution> </license> </licenses> <dependencies> </dependencies> <build> <!-- Override default name of generated artifacts --> <finalName>${build.name}</finalName> <plugins> </plugins> </build> </project>","title":"Template"},{"location":"minimalpom/#changes","text":"Replace the groupId tag content by something that describes your group . Replace the artifactId tag content by something that describes your project purpose . Update the name tag to a single human readable word, describing your product. Update the build.name variable to a camelCase description of your product, as you want the generated executable file to be named. Update the developer name and info! Do not use my name! Choose a license, or remove the license block if you want to reserve all rights.","title":"Changes"},{"location":"profiles/","text":"","title":"Profiles"},{"location":"run/","text":"Run This one depends on the frameworks you are using: Vanilla / No Frameworks Spring Boot Java FX <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <version>1.6.0</version> <executions> <execution> <goals> <goal>java</goal> </goals> </execution> </executions> <configuration> <mainClass>eu.kartoffelquadrat.printer.PrinterVsLogger</mainClass> </configuration> </plugin> Start with: mvn clean package exec:java ---No Plugins Needed--- Start with: mvn clean package spring-boot:run <plugin> <groupId>org.openjfx</groupId> <artifactId>javafx-maven-plugin</artifactId> <version>0.0.8</version> <configuration> <mainClass>eu.kartoffelquadrat.javafxhelloworld.Launcher</mainClass> </configuration> </plugin> Start with: mvn clean package javafx:run","title":"Direct Run"},{"location":"run/#run","text":"This one depends on the frameworks you are using: Vanilla / No Frameworks Spring Boot Java FX <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <version>1.6.0</version> <executions> <execution> <goals> <goal>java</goal> </goals> </execution> </executions> <configuration> <mainClass>eu.kartoffelquadrat.printer.PrinterVsLogger</mainClass> </configuration> </plugin> Start with: mvn clean package exec:java ---No Plugins Needed--- Start with: mvn clean package spring-boot:run <plugin> <groupId>org.openjfx</groupId> <artifactId>javafx-maven-plugin</artifactId> <version>0.0.8</version> <configuration> <mainClass>eu.kartoffelquadrat.javafxhelloworld.Launcher</mainClass> </configuration> </plugin> Start with: mvn clean package javafx:run","title":"Run"},{"location":"signature/","text":"","title":"Signature"}]}